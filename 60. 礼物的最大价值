#include<algorithm>
#include<vector>
#include<stdlib.h>
using namespace std;


class Solution {
public:
    int getMaxValue(vector<vector<int>>& grid) {
        // f(i,j) the maximum of value that we can take until the ith row and jth column
        //f(i,j)=max(f(i-1,j),f(i,j-1))+a[i][j]
        //I need to deal with the boundary conditions.
        const int N=1360;
        int dp[N][N]={};
        int ans=-1;
        int size=grid.size();
        int size1=grid[0].size();
        for( int i=0;i<size;i++)
        {
            for( int j=0;j<size1;j++)
            {
                if(i-1>=0 && j-1>=0) dp[i][j]=max(dp[i][j-1]+grid[i][j],dp[i-1][j]+grid[i][j]);
                else if(i-1>=0 && j-1<0) dp[i][j]=grid[i][j]+dp[i-1][j];
                else if(i-1<0 && j-1>=0) dp[i][j]=grid[i][j]+dp[i][j-1];
                else if(i-1<0&&j-1<0) dp[i][j]=grid[i][j];
                ans=dp[i][j]>ans?dp[i][j]:ans;


            }
        }
        return ans;
    }
};
